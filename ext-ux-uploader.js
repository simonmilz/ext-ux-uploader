Ext.namespace("Ext.ux.uploader");Ext.ux.uploader.AbstractAdapter=function(A){Ext.ux.uploader.AbstractAdapter.superclass.constructor.call(this);this._initialConfig=A;Ext.apply(this,A);this.addEvents({uploadstart:true,uploadstop:true,uploadprogress:true,queueerror:true,queueempty:true,filequeued:true,fileremoved:true,queuecomplete:true});this._features={queue:true,progress:false,pausequeue:true,pauseupload:false,filesize:false};this._init()};Ext.extend(Ext.ux.uploader.AbstractAdapter,Ext.util.Observable,{lang:{INVALID_FILETYPE:"Invalid File Type",EXCEEDS_MAXSIZE:"File exceeds maximum size of {0}"},_validFileName:function(A){var B=true;if(A==""){return false}if(this.filter&&Ext.type(this.filter)=="regexp"){B=this.filter.test(A);if(!B){return false}}else{if(this.filter&&Ext.type(this.filter)=="string"){if(!this.filters){this.filters=[this.filter]}else{if(Ext.type(this.filters)=="array"){this.filters[this.filters.length]=this.filter}}}}if(this.filters&&Ext.type(this.filters)=="array"){var C=new RegExp(("("+this.filters.join("|")+")$").replace(/\./,"."),"i");B=C.test(A)}return B},_basename:function(B){var A=B.replace(/^.*[\/\\]/g,"");if(typeof (suffix)=="string"&&A.substr(A.length-suffix.length)==suffix){A=A.substr(0,A.length-suffix.length)}return A},_init:function(){},hasFeature:function(A){return this._features[A]},browse:function(){},upload:function(A){},clearQueue:function(){},stop:function(A){},remove:function(A){},removeAt:function(A){},clearQueue:function(){},getQueue:function(){},getCompleted:function(){},get:function(C,B){var A="_"+C;if(this[A]){return this[A]}return Ext.type(B)=="undefined"?false:B}});Ext.ux.uploader.AdapterFactory=(function(){var A={};return{register:function(B,C){A[B]=C},reg:function(B,C){this.register(B,C)},create:function(C,B){if(!A[C]){throw'Uploader Type "'+C+'" is not registered'}else{var D=new A[C](B);D.type=C;return D}}}})();